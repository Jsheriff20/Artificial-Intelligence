using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BingMapsRESTToolkit;

/// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace distance_between_two_points_namespace
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class distance_between_two_points
    {
        [JsonProperty("resourceSets")]
        public List<ResourceSet> ResourceSets { get; set; }
    }

    public partial class ResourceSet
    {
        [JsonProperty("estimatedTotal")]
        public long EstimatedTotal { get; set; }

        [JsonProperty("resources")]
        public List<Resource> Resources { get; set; }
    }

    public partial class Resource
    {
        [JsonProperty("__type")]
        public string Type { get; set; }

        [JsonProperty("destinations")]
        public List<Destination> Destinations { get; set; }

        [JsonProperty("errorMessage")]
        public string ErrorMessage { get; set; }

        [JsonProperty("origins")]
        public List<Destination> Origins { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Destination
    {
        [JsonProperty("latitude")]
        public double Latitude { get; set; }

        [JsonProperty("longitude")]
        public double Longitude { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("destinationIndex")]
        public long DestinationIndex { get; set; }

        [JsonProperty("originIndex")]
        public long OriginIndex { get; set; }

        [JsonProperty("totalWalkDuration")]
        public long TotalWalkDuration { get; set; }

        [JsonProperty("travelDistance")]
        public double TravelDistance { get; set; }

        [JsonProperty("travelDuration")]
        public double TravelDuration { get; set; }
    }

    public partial class distance_between_two_points
    {
        public static distance_between_two_points FromJson(string json) => JsonConvert.DeserializeObject<distance_between_two_points>(json, distance_between_two_points_namespace.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this distance_between_two_points self) => JsonConvert.SerializeObject(self, distance_between_two_points_namespace.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}


